#!/usr/bin/python3
"""Export a list of OTRS tickets to regular text files using
ticketGet api"""
import os
import sys
import json
import argparse
import asyncio
import aiohttp
import aiofiles


async def fetch(session, url, username, password):
    payload = {
        "UserLogin": username,
        "Password": password,
        "AllArticles": "1",
        "Attachments": "0",
    }
    async with session.get(url, params=payload, verify_ssl=False) as response:
        if response.status != 200:
            response.raise_for_status()
        return await response.content.read()


async def toTxt(username, password, tl, otrs_url, API_URL):
    connector = aiohttp.TCPConnector(limit=50)
    try:
        tasks = []
        async with aiohttp.ClientSession(connector=connector) as session:
            for ticket in tl:
                url = f"{otrs_url}{API_URL}{ticket}"
                print(f"Downloading {ticket}..")
                task = asyncio.create_task(fetch(session, url, username, password))
                tasks.append(task)
            results = await asyncio.gather(*tasks)
    except Exception as e:
        print(f"Unable to fetch ticket {url}: {e}")
        return

    for value in results:
        await writeBox(value)


async def writeBox(resp):
    try:
        data = json.loads(resp)
    except json.decoder.JSONDecodeError as e:
        print(f"Unable to parse json: {e}")
        return

    if len(data) < 1:
        print("No valid json data found")
        return

    ticket = data["Ticket"][0]["TicketNumber"]
    print(f"Processing: {ticket}")

    target = f"{ticket}.txt"

    async with aiofiles.open(target, "wb+") as tfh:
        for td in data["Ticket"]:
            for article in td["Article"]:
                # ignore system messages
                if article["SenderType"] == "system":
                    continue
                if (
                    "To provide the best possible support please send us the following latest logfiles"
                    in article["Body"]
                ):
                    continue

                if article["Body"].lower() == "close":
                    continue
                if article["Body"].lower() == "spam":
                    continue
                await tfh.write(article["Body"].encode(errors="replace"))


async def main():
    API_URL = "/otrs/nph-genericinterface.pl/Webservice/getotrs/TicketGet/"
    CONFIG = f"{os.path.expanduser('~')}/.getotrs"

    url_required = 1
    user_required = 1
    pass_required = 1

    username = None
    password = None
    otrs_url = None

    config = None
    if os.path.exists(CONFIG):
        print(f"Using config: {CONFIG}")
        try:
            config = json.loads(open(CONFIG).read())

            username = config["username"]
            password = config["password"]
            otrs_url = config["otrs_url"]

            url_required = 0
            user_required = 0
            pass_required = 0
        except json.decoder.JSONDecodeError as e:
            print(f"Unable to parse config: {e}")
            sys.exit(1)
    else:
        print(f"No config file: {CONFIG}")

    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--url", help="Base URL to otrs (http://host/)", type=str, required=url_required
    )
    parser.add_argument(
        "--ticketlist",
        help="File containing a list of tickets",
        type=str,
        required=1,
    )
    parser.add_argument(
        "--user", help="OTRS Username", type=str, required=user_required
    )
    parser.add_argument("--pw", help="OTRS Password", type=str, required=pass_required)
    args = parser.parse_args()

    if not config:
        username = args.user
        password = args.pw
        otrs_url = args.url

    if not os.path.exists(args.ticketlist):
        print(f"Error: specified ticket list {args.ticketlist} not found")
        sys.exit(1)

    with open(args.ticketlist, "r") as tlfh:
        tl = tlfh.readlines()

    await toTxt(username, password, tl, otrs_url, API_URL)


if __name__ == "__main__":
    asyncio.run(main())
